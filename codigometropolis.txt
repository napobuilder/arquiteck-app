import React from 'react';
import { motion } from 'framer-motion';
import { useStore } from '../store/store'; // <-- Importa tu store principal
import { Building as BuildingType } from '../types'; // <-- Importa tu tipo Building

// --- CONFIGURATION ---
// La misma configuración visual que definimos.
const skylineConfig = {
  layers: {
    back: { fill: '#2c2a4a' },
    mid: { fill: '#4f4a7e' },
    front: { fill: '#7a6f9b' },
  },
  viewBox: { width: 800, height: 400 },
  groundLevel: 380,
};

// --- BUILDING COMPONENT ---
// Este componente no cambia.
interface SkylineBuildingProps {
  building: BuildingType;
}

const SkylineBuilding: React.FC<SkylineBuildingProps> = ({ building }) => {
  const { x, width, height, layer } = building;
  const { groundLevel } = skylineConfig;
  const layerStyle = skylineConfig.layers[layer];

  return (
    <motion.rect
      x={x}
      width={width}
      fill={layerStyle.fill}
      initial={{ y: groundLevel, height: 0 }}
      animate={{ y: groundLevel - height, height: height }}
      transition={{ type: 'spring', stiffness: 80, damping: 15 }}
      rx="2"
    />
  );
};


// --- METROPOLIS VIEW COMPONENT (ADAPTADO) ---
export const MetropolisView: React.FC = () => {
    // 1. LEE LOS DATOS DIRECTAMENTE DEL STORE DE ZUSTAND
    const buildings = useStore((state) => state.cityData);
    // 2. OBTIENE LA ACCIÓN PARA AÑADIR EDIFICIOS (la crearemos en el siguiente paso)
    const addBuilding = useStore((state) => state.addBuildingToCity);

    const renderLayer = (layerName: BuildingType['layer']) => {
        return buildings
            .filter(b => b.layer === layerName)
            .map(building => <SkylineBuilding key={building.id} building={building} />);
    };

    return (
        <div className="w-full max-w-4xl mx-auto p-4 md:p-8 rounded-lg bg-gray-800/50 shadow-2xl border border-gray-700">
            <div className="flex flex-col sm:flex-row justify-between items-center mb-6">
                <div>
                    <h1 className="text-2xl md:text-3xl font-bold text-white">Tu Horizonte</h1>
                    <p className="text-gray-400">Observa cómo tu ciudad crece con cada sesión de foco.</p>
                </div>
                {/* Este botón es útil para pruebas, pero la lógica real vendrá del timer */}
                <button
                    onClick={addBuilding}
                    className="mt-4 sm:mt-0 px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-500"
                >
                    Añadir Edificio (Test)
                </button>
            </div>
            
            <div className="bg-gray-900/70 rounded-lg overflow-hidden border-t-2 border-indigo-500/50">
                <svg 
                    viewBox={`0 0 ${skylineConfig.viewBox.width} ${skylineConfig.viewBox.height}`} 
                    xmlns="http://www.w3.org/2000/svg" 
                    preserveAspectRatio="xMidYMid meet"
                    className="w-full h-auto"
                >
                    <defs>
                        <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop offset="0%" style={{stopColor: '#3a3d8a'}} />
                            <stop offset="60%" style={{stopColor: '#7a5c9a'}} />
                            <stop offset="100%" style={{stopColor: '#d87b9b'}} />
                        </linearGradient>
                        <filter id="subtleShadow" x="-20%" y="-20%" width="140%" height="140%">
                            <feDropShadow dx="0" dy="3" stdDeviation="3" floodColor="#000000" floodOpacity="0.15" />
                        </filter>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#skyGradient)" />
                    <g id="clouds" fillOpacity="0.9">
                         <path d="M 100 120 C 80 120, 80 90, 110 90 C 110 70, 140 70, 150 90 C 180 90, 180 120, 160 120 Z" fill="#f0e4d7" />
                         <path d="M 250 80 C 230 80, 230 50, 260 50 C 260 30, 290 30, 300 50 C 330 50, 330 80, 310 80 Z" fill="#f5f0ed" />
                         <path d="M 550 110 C 530 110, 530 80, 560 80 C 560 60, 590 60, 600 80 C 630 80, 630 110, 610 110 Z" fill="#f0e4d7" />
                    </g>
                    <g id="back-buildings" filter="url(#subtleShadow)">{renderLayer('back')}</g>
                    <g id="mid-buildings" filter="url(#subtleShadow)">{renderLayer('mid')}</g>
                    <g id="front-buildings" filter="url(#subtleShadow)">{renderLayer('front')}</g>
                </svg>
            </div>
        </div>
    );
};

// Si tu archivo usa 'export default', cambia la línea de arriba por:
// export default MetropolisView;
